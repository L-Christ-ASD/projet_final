---
- name: Installation et configuration du cluster RKE2
  hosts: all
  become: true
  tasks:
    - name: Installer iptables
      apt:
        name: iptables
        state: present

    - name: Définir le hostname
      command: hostnamectl set-hostname {{ inventory_hostname }}

    - name: Configurer le fichier /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1 localhost
          127.0.1.1 {{ inventory_hostname }}.christ.lan

          ::1     ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
          
          172.31.64.101 rke2cluster.christ.lan

#         {{ ansible_facts['default_ipv4']['address'] }} {{ inventory_hostname }}


- name: Configurer le premier master
  hosts: master1
  become: true
  tasks:
    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2
        - /var/lib/rancher/rke2/server/manifests

    - name: Ajouter la configuration RKE2
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |
          tls-san:
            - {{ inventory_hostname }}.christ.lan
            - {{ inventory_hostname }}
            - {{ ansible_facts['default_ipv4']['address'] }}
            - 172.31.76.101
          cni: "canal"
#           - rke2cluster.christ.lan

    - name: Ajouter rke2-coredns-config.yaml
      copy:
        dest: /var/lib/rancher/rke2/server/manifests/rke2-coredns-config.yaml
        content: |
          apiVersion: helm.cattle.io/v1
          kind: HelmChartConfig
          metadata:
            creation: null
            name: rke2-coredns
            namespace: kube-system
          spec:
            valuesContent: |-
              nodelocal:
                enabled: true
            bootstrap: true

    - name: Télécharger et installer RKE2
      get_url:
        url: "https://get.rke2.io"
        dest: /tmp/install_rke2.sh
        mode: '0755'

    - name: Exécuter le script d'installation RKE2
      environment:
        INSTALL_RKE2_TYPE: "server"
      command: /tmp/install_rke2.sh
      args:
        creates: /usr/local/bin/rke2

    - name: Vérifier la version de RKE2
      command: /usr/local/bin/rke2 --version
      register: rke2_version
      changed_when: false

    - name: Afficher la version de RKE2
      debug:
        var: rke2_version.stdout

    - name: Démarrer RKE2 server
      systemd:
        name: rke2-server
        enabled: true
        state: started

    - name: Attendre que RKE2 soit actif
      command: systemctl is-active rke2-server
      register: rke2_status
      until: rke2_status.stdout == "active"
      retries: 10
      delay: 5


    - name: Vérifier le statut du service RKE2 après démarrage
      command: systemctl status rke2-server
      register: rke2_status
      changed_when: false

    - name: Afficher le statut du service RKE2
      debug:
        var: rke2_status.stdout_lines

    #- name: Mettre à jour le fichier rke2.yaml avec l'IP privée sur master1
    #  lineinfile:
    #    path: /etc/rancher/rke2/rke2.yaml
    #    regexp: '^    server: https://.*:6443'
    #    line: '    server: https://{{ ansible_facts["default_ipv4"]["address"] }}:6443'
    #                  
#
    #- name: Redémarer RKE2 server sur master1 avec l'IP privée
    #  systemd:
    #    name: rke2-server
    #    enabled: true
    #    state: restarted
#
    #- name: Pause de 300 secondes pour laisser master1 démarer le service RKE2 tranquilement!
    #  ansible.builtin.pause:
    #    seconds: 300

    #- name: Attendre que RKE2 soit actif
    #  command: systemctl is-active rke2-server
    #  register: rke2_status
    #  until: rke2_status.stdout == "active"
    #  retries: 10
    #  delay: 5
#
#
    #- name: Vérifier le statut du service RKE2 après démarrage
    #  command: systemctl status rke2-server
    #  register: rke2_status
    #  changed_when: false
#
    #- name: Afficher le statut du service RKE2
    #  debug:
    #    var: rke2_status.stdout_lines
#
    #- name: Vérifier le fichier de configuration RKE2
    #  command: cat /etc/rancher/rke2/rke2.yaml
    #  register: rke2_config
    #  changed_when: false
#
    #- name: Afficher le fichier de configuration RKE2
    #  debug:
    #    var: rke2_config.stdout_lines

    # ==================Vérifs=====================

    - name: Lister les conteneurs dans containerd
      command: /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock --namespace k8s.io container ls
      register: container_list
      changed_when: false

    - name: Afficher les conteneurs en cours d'exécution
      debug:
        var: container_list.stdout_lines

    #===================token du master================================
    - name: Vérifier si le fichier node-token existe
      stat:
        path: /var/lib/rancher/rke2/server/node-token
      register: node_token_file

    - name: Récupérer le token du master
      slurp:
        src: /var/lib/rancher/rke2/server/node-token
      register: node_token
      when: node_token_file.stat.exists

    #============== Installation et configuration de Kube-VIP =========
    - name: Télécharger le fichier RBAC de Kube-VIP
      get_url:
        url: https://kube-vip.io/manifests/rbac.yaml
        dest: /var/lib/rancher/rke2/server/manifests/rbac.yaml
        mode: '0644'

    - name: Télécharger l'image Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io image pull docker.io/plndr/kube-vip:latest
      register: kube_vip_pull
      changed_when: "'unpacking' in kube_vip_pull.stdout"

    - name: Vérifier le téléchargement de l'image Kube-VIP
      debug:
        var: kube_vip_pull.stdout_lines

    - name: Générer le manifeste Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io run --rm --net-host docker.io/plndr/kube-vip:latest vip /kube-vip 
        manifest daemonset --arp --interface enX0 --address 172.31.64.101 
        --controlplane --leaderElection --taint --services --inCluster 
      register: kube_vip_manifest

    - name: Sauvegarder le manifeste Kube-VIP
      copy:
        content: "{{ kube_vip_manifest.stdout }}"
        dest: /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
        mode: '0644'


    #====== application des manifestes via bastion================
    #- name: Appliquer le manifeste Kube-VIP
    #  command: kubectl apply -f /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
    #  when: kube_vip_manifest.stdout is defined

    - name: Vérifier le fichier de configuration RKE2
      command: cat /etc/rancher/rke2/rke2.yaml
      register: rke2_config
      changed_when: false

    - name: Afficher le fichier de configuration RKE2
      debug:
        var: rke2_config.stdout_lines


# kubectl sur master1
- name: Configurer kubectl sur master-1
  hosts: master1
  become: true
  tasks:

    - name: Vérifier l'existence de kubectl
      stat:
        path: /var/lib/rancher/rke2/bin/kubectl
      register: kubectl_stat

    - name: Afficher les informations sur kubectl
      debug:
        msg: "Kubectl existe avec les permissions: {{ kubectl_stat.stat.mode }}"
      when: kubectl_stat.stat.exists

    - name: Ajouter /var/lib/rancher/rke2/bin au PATH de l'utilisateur
      lineinfile:
        path: ~/.bashrc
        line: 'export PATH=$PATH:/var/lib/rancher/rke2/bin'
        state: present

    - name: Ajouter la variable d'environnement KUBECONFIG dans .bashrc
      lineinfile:
        path: ~/.bashrc
        line: 'export KUBECONFIG=/etc/rancher/rke2/rke2.yaml'
        state: present

    - name: Ajouter l'alias k=/usr/local/bin/kubectl
      lineinfile:
        path: ~/.bashrc
        line: 'alias k=/usr/local/bin/kubectl'
        state: present

    - name: Vérifier que le fichier de configuration KUBECONFIG existe
      stat:
        path: /etc/rancher/rke2/rke2.yaml
      register: kubeconfig_stat

    - name: Afficher l'état du fichier KUBECONFIG
      debug:
        msg: "Le fichier rke2.yaml existe avec les permissions: {{ kubeconfig_stat.stat.mode }}"
      when: kubeconfig_stat.stat.exists

    - name: Modifier les permissions de rke2.yaml
      file:
        path: /etc/rancher/rke2/rke2.yaml
        mode: '0644'
      
    - name: Vérifier les permissions de rke2.yaml
      stat:
        path: /etc/rancher/rke2/rke2.yaml
      register: kubeconfig_stat

    - name: Afficher les nouvelles permissions de rke2.yml
      debug:
        msg: "Les nouvelles permissions du fichier rke2.yaml: {{ kubeconfig_stat.stat.mode }}"
      when: kubeconfig_stat.stat.exists

    - name: Charger le nouveau PATH
      shell: source ~/.bashrc
      args:
        executable: /bin/bash

    - name: Vérifier la version du client kubectl (chemin absolu)
      command: /var/lib/rancher/rke2/bin/kubectl version --client
      register: kubectl_version
      changed_when: false

    - name: Afficher la version de kubectl
      debug:
        msg: "{{ kubectl_version.stdout }}"

    - name: Debug - Voir la sortie brute de kubectl get nodes
      command: /var/lib/rancher/rke2/bin/kubectl get nodes --no-headers
      register: kubectl_nodes
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      changed_when: false
      ignore_errors: true

    - name: Afficher ce que renvoie kubectl get nodes
      debug:
        var: kubectl_nodes.stdout_lines

    - name: Attendre que tous les nœuds soient Ready (loop avec attente)
      shell: /var/lib/rancher/rke2/bin/kubectl get nodes --no-headers
      register: kubectl_nodes
      environment:
        KUBECONFIG: /etc/rancher/rke2/rke2.yaml
      changed_when: false
      until: kubectl_nodes.stdout is search(" Ready ")
      retries: 40
      delay: 30

    - name: Afficher la liste des nœuds
      debug:
        msg: "{{ kubectl_nodes.stdout }}"


    #- name: Attendre que les nœuds soient prêts
    #  command: /var/lib/rancher/rke2/bin/kubectl get nodes --no-headers
    #  register: kubectl_nodes
    #  changed_when: false
    #  until: "'Ready' in kubectl_nodes.stdout"
    #  retries: 40
    #  delay: 30

#------------------------------------------------------------
    - name: Stocker l'IP privée de master1 dans hostvars
      set_fact:
        master1_private_ip: "{{ ansible_facts['default_ipv4']['address'] }}"




- name: Configurer les 2 autres masters
  hosts: master2, master3
  become: true
  tasks:

    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2
        - /var/lib/rancher/rke2/server/manifests

    - name: Copier la configuration RKE2 sur les 2 masters
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |
          token: "{{ hostvars['master1']['node_token']['content'] | b64decode | trim }}"
          server: "https://172.31.64.101:9345"
          tls-san:
            - {{ inventory_hostname }}.christ.lan
            - {{ inventory_hostname }}
            - {{ ansible_facts['default_ipv4']['address'] }}
            - 172.31.64.101 
            - rke2cluster.christ.lan
          write-kubeconfig-mode: "0644"

# server: "https://{{ hostvars['master1']['master1_private_ip'] }}:9345"


    - name: Télécharger et installer RKE2
      get_url:
        url: "https://get.rke2.io"
        dest: /tmp/install_rke2.sh
        mode: '0755'
      #when: inventory_hostname != "master1"

    - name: Exécuter le script d'installation RKE2
      environment:
        INSTALL_RKE2_TYPE: "server"
      command: /tmp/install_rke2.sh
      args:
        creates: /usr/local/bin/rke2
      #when: inventory_hostname != "master1"

    - name: Vérifier la version de RKE2
      command: /usr/local/bin/rke2 --version
      register: rke2_version
      changed_when: false
      #when: inventory_hostname != "master1"

    - name: Afficher la version de RKE2
      debug:
        var: rke2_version.stdout
      #when: inventory_hostname != "master1"

    #- name: Pause de 60 secondes pour laisser master1 démarer le service RKE2 tranquilement!
    #  ansible.builtin.pause:
    #    seconds: 60

    - name: Démarrer RKE2 server master2
      systemd:
        name: rke2-server
        enabled: true
        state: started
      ignore_errors: true
      when: inventory_hostname == "master2"

    - name: Pause de 420 secondes pour laisser master2 démarer le service RKE2 tranquilement!
      ansible.builtin.pause:
        seconds: 420
      when: inventory_hostname == "master2"

    - name: Vérifier le status rke2-server sur master2
      command: systemctl is-active rke2-server
      register: rke2_status
      until: rke2_status.stdout == "active"
      retries: 30
      delay: 20
      when: inventory_hostname == "master2"

    - name: Afficher le statut du service RKE2 master2
      debug:
        var: rke2_status.stdout_lines
      when: inventory_hostname == "master2"

    - name: Attendre que SSH soit de nouveau disponible après démarrage de RKE2
      wait_for_connection:
        timeout: 300
        delay: 20
      when: inventory_hostname == "master2"


    - name: Vérifier si RKE2 est actif sur master2
      command: systemctl is-active rke2-server
      register: rke2_status_master2
      until: rke2_status_master2.stdout == "active"
      retries: 20
      delay: 10
      when: inventory_hostname == "master2"

    - name: Afficher le statut du service RKE2 master2
      debug:
        var: rke2_status.stdout_lines
      when: inventory_hostname == "master2"

    - name: Démarrer RKE2 server sur master3
      systemd:
        name: rke2-server
        enabled: true
        state: started
      ignore_errors: true
      when: inventory_hostname == "master3"

    - name: Attendre que SSH soit de nouveau disponible après démarrage de RKE2
      wait_for_connection:
        timeout: 300
        delay: 20
      when: inventory_hostname == "master3"

    - name: Pause de 420 secondes pour laisser master3 démarer le service RKE2 tranquilement!
      ansible.builtin.pause:
        seconds: 420
      when: inventory_hostname == "master3"

    - name: Attendre que RKE2 soit actif
      command: systemctl is-active rke2-server
      register: rke2_status
      until: rke2_status.stdout == "active"
      retries: 30
      delay: 20
      when: inventory_hostname == "master3"

    - name: Afficher le statut du service RKE2 master2
      debug:
        var: rke2_status.stdout_lines
      when: inventory_hostname == "master2"



    #- name: Attendre 60 secondes avant de Mettre à jour le fichier rke2.yaml
    #  pause:
    #    seconds: 60
    #  when: inventory_hostname == "master3"


#============== Installation et configuration de Kube-VIP =========
    # sur les 2 masters 
    - name: Télécharger le fichier RBAC de Kube-VIP pour les 2 autres masters
      get_url:
        url: https://kube-vip.io/manifests/rbac.yaml
        dest: /var/lib/rancher/rke2/server/manifests/rbac.yaml
        mode: '0644'

    - name: Télécharger l'image Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io image pull docker.io/plndr/kube-vip:latest
      register: kube_vip_pull
      changed_when: "'unpacking' in kube_vip_pull.stdout"

    - name: Vérifier le téléchargement de l'image Kube-VIP
      debug:
        var: kube_vip_pull.stdout_lines

    - name: Générer le manifeste Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io run --rm --net-host docker.io/plndr/kube-vip:latest vip /kube-vip 
        manifest daemonset --arp --interface eth0 --address 172.31.64.100
        --controlplane --leaderElection --taint --services --inCluster 
      register: kube_vip_manifest

    - name: Sauvegarder le manifeste Kube-VIP
      copy:
        content: "{{ kube_vip_manifest.stdout }}"
        dest: /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
        mode: '0644'



#==================Worker=============================
- name: Configurer le worker
  hosts: workers
  become: true
  tasks:

    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2

    - name: Copier la configuration RKE2
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |    
          token: "{{ hostvars['master1']['node_token']['content'] | b64decode | trim }}"
          server: "https://172.31.64.101:9345"

    - name: Télécharger et installer RKE2
      get_url:
        url: "https://get.rke2.io"
        dest: /tmp/install_rke2.sh
        mode: '0755'

    - name: Exécuter le script d'installation RKE2
      environment:
        INSTALL_RKE2_TYPE: "agent"
      command: /tmp/install_rke2.sh
      args:
        creates: /usr/local/bin/rke2

    - name: Vérifier la version de RKE2
      command: /usr/local/bin/rke2 --version
      register: rke2_version
      changed_when: false

    - name: Afficher la version de RKE2
      debug:
        var: rke2_version.stdout

    - name: Pause de 60 secondes avant de demarer le worker 
      ansible.builtin.pause:
        seconds: 60

    - name: Démarrer RKE2 agent
      systemd:
        name: rke2-agent
        enabled: true
        state: started
    - name: Pause de 360 secondes pour laisser master1 démarer le service RKE2 tranquilement!
      ansible.builtin.pause:
        seconds: 360

    


