---
- name: Installation et configuration du cluster RKE2
  hosts: all
  become: true
  tasks:
    - name: Installer iptables
      apt:
        name: iptables
        state: present

    - name: Définir le hostname
      command: hostnamectl set-hostname {{ inventory_hostname }}

    - name: Configurer le fichier /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1 localhost
          {{ ansible_facts['default_ipv4']['address'] }} {{ inventory_hostname }}
          ::1     ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters

- name: Configurer le premier master
  hosts: master1
  become: true
  tasks:
    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2
        - /var/lib/rancher/rke2/server/manifests

    - name: Ajouter la configuration RKE2
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |
          tls-san:
            - master1.christ.lan
            - master1
            - {{ ansible_facts['default_ipv4']['address'] }}
          cni: "canal"
    
    - name: Ajouter rke2-coredns-config.yaml
      copy:
        dest: /var/lib/rancher/rke2/server/manifests/rke2-coredns-config.yaml
        content: |
          apiVersion: helm.cattle.io/v1
          kind: HelmChartConfig
          metadata:
            creation: null
            name: rke2-coredns
            namespace: kube-system
          spec:
            valuesContent: |-
              nodelocal:
                enabled: true
            bootstrap: true

    #- name: Installer RKE2
    #  shell: curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_VERSION="v1.30.0+rke2r1" sh -
    #  args:
    #    creates: /usr/local/bin/rke2

    - name: Télécharger et installer RKE2
      get_url:
        url: "https://get.rke2.io"
        dest: /tmp/install_rke2.sh
        mode: '0755'

    - name: Exécuter le script d'installation RKE2
      command: /tmp/install_rke2.sh
      args:
        creates: /usr/local/bin/rke2

    - name: Vérifier la version de RKE2
      command: /usr/local/bin/rke2 --version
      register: rke2_version
      changed_when: false

    - name: Afficher la version de RKE2
      debug:
        var: rke2_version.stdout

    - name: Démarrer RKE2 server
      systemd:
        name: rke2-server
        enabled: true
        state: started

    - name: Attendre que RKE2 soit actif
      command: systemctl is-active rke2-server
      register: rke2_status
      until: rke2_status.stdout == "active"
      retries: 10
      delay: 5

    # ==================Vérifs=====================
    - name: Vérifier le statut du service RKE2 après démarrage
      command: systemctl status rke2-server
      register: rke2_status
      changed_when: false

    - name: Afficher le statut du service RKE2
      debug:
        var: rke2_status.stdout_lines

    - name: Lister les conteneurs dans containerd
      command: /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock --namespace k8s.io container ls
      register: container_list
      changed_when: false

    - name: Afficher les conteneurs en cours d'exécution
      debug:
        var: container_list.stdout_lines

    #===================token du master================================
    - name: Vérifier si le fichier node-token existe
      stat:
        path: /var/lib/rancher/rke2/server/node-token
      register: node_token_file

    - name: Récupérer le token du master
      slurp:
        src: /var/lib/rancher/rke2/server/node-token
      register: node_token
      when: node_token_file.stat.exists

    #============== Installation et configuration de Kube-VIP =========
    - name: Télécharger le fichier RBAC de Kube-VIP
      get_url:
        url: https://kube-vip.io/manifests/rbac.yaml
        dest: /var/lib/rancher/rke2/server/manifests/rbac.yaml
        mode: '0644'

    - name: Télécharger l'image Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io image pull docker.io/plndr/kube-vip:latest
      register: kube_vip_pull
      changed_when: "'unpacking' in kube_vip_pull.stdout"

    - name: Vérifier le téléchargement de l'image Kube-VIP
      debug:
        var: kube_vip_pull.stdout_lines

    - name: Générer le manifeste Kube-VIP
      command: >
        /var/lib/rancher/rke2/bin/ctr --address /run/k3s/containerd/containerd.sock 
        --namespace k8s.io run --rm --net-host docker.io/plndr/kube-vip:latest vip /kube-vip 
        manifest daemonset --arp --interface eth0 --address {{ ansible_facts['default_ipv4']['address'] }} 
        --controlplane --leaderElection --taint --services --inCluster
      register: kube_vip_manifest

    - name: Sauvegarder le manifeste Kube-VIP
      copy:
        content: "{{ kube_vip_manifest.stdout }}"
        dest: /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
        mode: '0644'

    - name: Appliquer le manifeste Kube-VIP
      command: kubectl apply -f /var/lib/rancher/rke2/server/manifests/kube-vip.yaml
      when: kube_vip_manifest.stdout is defined

    - name: Vérifier le fichier de configuration RKE2
      command: cat /etc/rancher/rke2/rke2.yaml
      register: rke2_config
      changed_when: false

    - name: Afficher le fichier de configuration RKE2
      debug:
        var: rke2_config.stdout_lines


- name: Configurer les autres masters
  hosts: master2,master3
  become: true
  tasks:

    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2
        - /var/lib/rancher/rke2/server/manifests

    - name: Copier la configuration RKE2
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |
          server: https://{{ hostvars['master1']['ansible_host'] }}:9345
          token: "{{ hostvars['master1']['node_token']['content'] | b64decode | trim }}"
          tls-san:
            - {{ inventory_hostname }}
            - {{ ansible_host }}
            - {{ ansible_facts['default_ipv4']['address'] }}

    - name: Installer RKE2
      shell: curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_VERSION="v1.30.0+rke2r1" sh -
      args:
        creates: /usr/local/bin/rke2

    - name: Démarrer RKE2 server
      systemd:
        name: rke2-server
        enabled: true
        state: started
      when: inventory_hostname == "master2"

    - name: Attendre 60 secondes avant de démarrer master3
      pause:
        seconds: 60
      when: inventory_hostname == "master2"

    - name: Vérifier si RKE2 est actif sur master2
      command: systemctl is-active rke2-server
      register: rke2_status_master2
      until: rke2_status_master2.stdout == "active"
      retries: 10
      delay: 5
      when: inventory_hostname == "master2"


    - name: Démarrer RKE2 server sur master3
      systemd:
        name: rke2-server
        enabled: true
        state: started
      when: inventory_hostname == "master3"

#==================Worker=============================
- name: Configurer le worker
  hosts: workers
  become: true
  tasks:

    - name: Créer les dossiers nécessaires
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/rancher/rke2

    - name: Copier la configuration RKE2
      copy:
        dest: /etc/rancher/rke2/config.yaml
        content: |
          server: https://{{ hostvars['master1']['ansible_host'] }}:9345
          token: "{{ hostvars['master1']['node_token']['content'] | b64decode | trim }}"

    - name: Installer RKE2 agent
      shell: curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_VERSION="v1.30.0+rke2r1" sh -
      args:
        creates: /usr/local/bin/rke2

    - name: Démarrer RKE2 agent
      systemd:
        name: rke2-agent
        enabled: true
        state: started
