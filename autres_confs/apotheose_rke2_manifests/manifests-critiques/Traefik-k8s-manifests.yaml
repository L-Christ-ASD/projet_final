---
apiVersion: v1
kind: Namespace
metadata:
  name: apotheose
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-entrypoint-script
  namespace: apotheose
data:
  traefik_entrypoint.sh: |
    #!/bin/sh

    if [ ! -f "/letsencrypt/acme.json" ]; then
        touch /letsencrypt/acme.json
    fi
    chmod 600 /letsencrypt/acme.json
    exec traefik "$@"
---
apiVersion: v1
kind: Secret
metadata:
  name: traefik-env-secrets
  namespace: apotheose
type: Opaque
stringData:
  DUCKDNS_TOKEN: YzZhODE4YTItMTk2ZC00MzZkLTk4NjYtMWE2Nzc5NWEwM2Rl #"{{ env.DNS_TOKEN }}"
  BASIC_AUTH_USER: Y2hyaXN0 #"{{ env.BASIC_AUTH_USER }}"
  BASIC_AUTH_PASSWORD_HASH: bW9ubW90ZGVwYXNzZQ== #"{{ env.BASIC_AUTH_PASSWORD_HASH }}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: traefik-letsencrypt
  namespace: apotheose
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: apotheose
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      containers:
        - name: traefik
          image: traefik:v3.3
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 8080
          envFrom:
            - secretRef:
                name: traefik-env-secrets
          volumeMounts:
            - name: docker-socket
              mountPath: /var/run/docker.sock
              readOnly: true
            - name: letsencrypt
              mountPath: /letsencrypt
            - name: entrypoint-script
              mountPath: /traefik_entrypoint.sh
              subPath: traefik_entrypoint.sh
              readOnly: true
          command: ["/traefik_entrypoint.sh"]
          args:
            - "--api.insecure=true"
            - "--api.dashboard=true"
            - "--providers.kubernetescrd=true"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=duckdns"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.delayBeforeCheck=2s"
            - "--certificatesresolvers.myresolver.acme.email=christ.lumu@oclock.school"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.resolvers=8.8.8.8:53,8.8.4.4:53"
            - "--certificatesresolvers.myresolver.acme.tlschallenge=false"
            - "--certificatesresolvers.myresolver.acme.httpchallenge=false"
            - "--certificatesresolvers.myresolver.acme.dnschallenge.disablePropagationCheck=true"
            #--certificatesresolvers.myresolver.acme.dnschallenge.wildcard=true \
            #--certificatesresolvers.myresolver.acme.dnschallenge.authority="https://acme-v02.api.letsencrypt.org/directory"
      volumes:
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: letsencrypt
          persistentVolumeClaim:
            claimName: traefik-letsencrypt
        - name: entrypoint-script
          configMap:
            name: traefik-entrypoint-script
            defaultMode: 0777
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: apotheose
spec:
  selector:
    app: traefik
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
    - name: dashboard
      port: 8080
      targetPort: 8080
  type: LoadBalancer
